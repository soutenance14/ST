<?php

namespace App\Controller;

use App\Entity\Image;
use App\Entity\Trick;
use App\Form\TrickType;
use App\Repository\TrickRepository;
use DateTimeImmutable;
use Doctrine\DBAL\Exception\UniqueConstraintViolationException;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\String\Slugger\AsciiSlugger;

/**
 * @Route("/trick")
 */
class TrickController extends AbstractController
{
    /**
     * @Route("/", name="trick_index", methods={"GET"})
     */
    public function index(TrickRepository $trickRepository): Response
    {
        return $this->render('trick/index.html.twig', [
            'tricks' => $trickRepository->findAll(),
        ]);
    }

    /**
     * @Route("/new", name="trick_new", methods={"GET","POST"})
     */
    public function new(Request $request): Response
    {
        $error_message = false;
        $trick = new Trick();
        $form = $this->createForm(TrickType::class, $trick);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            //slugger part
            //en for the moment, maybe fr after
            $slugger = new AsciiSlugger('en',[
                'en' => [
                    '%' => 'percent',
                    'â‚¬' => 'euro',
                    '$' => 'dollars',
                    '&' => 'and',
                    '#' => 'hashtag',
                    ]
                ]);
            $entityManager = $this->getDoctrine()->getManager();
            $slug = $slugger->slug($trick->getTitle());
            //can use this to
            // $slug = $slugger->slug($form->get('title')->getData());
            $trick->setSlug($slug);
            $trick->setUser($this->getUser());
            $trick->setCreatedAt(new DateTimeImmutable());
            $entityManager->persist($trick);
            
            try
            {  
                // if slug not exists in db, trick can be save in db
                //first flush for trick
                $entityManager->flush();

                // images part
                // save image only if UniqueConstraintViolationException
                // is not generated
                $images = $form->get("images")->getData();     
                foreach($images as $fileImage)
                {
                    $image = $this->createImageEntity($fileImage);
                    $this->saveImageInServer($fileImage, $image);
                    $image->setTrick($trick);
                    $entityManager->persist($image);
                }
                // second flush for image
                $entityManager->flush();
                return $this->redirectToRoute('trick_index', [], Response::HTTP_SEE_OTHER);
            }
            // if slug exists in db, a UniqueConstraintViolationException is generated
            catch(UniqueConstraintViolationException $e)
            {
                $error_message = "An article with the same autogenerated slug exists ("
                .$trick->getSlug()
                ."), please change the name for your article";
            }
        }
        return $this->renderForm('trick/new.html.twig', [
            'error_message' => $error_message,
            'trick' => $trick,
            'form' => $form,
        ]);
    }

    /**
     * @Route("/{id}", name="trick_show", methods={"GET"})
     */
    public function show(Trick $trick): Response
    {
        return $this->render('trick/show.html.twig', [
            'trick' => $trick,
        ]);
    }

    /**
     * @Route("/{id}/edit", name="trick_edit", methods={"GET","POST"})
     */
    public function edit(Request $request, Trick $trick): Response
    {
        $form = $this->createForm(TrickType::class, $trick);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $this->getDoctrine()->getManager()->flush();

            return $this->redirectToRoute('trick_index', [], Response::HTTP_SEE_OTHER);
        }

        return $this->renderForm('trick/edit.html.twig', [
            'trick' => $trick,
            'form' => $form,
        ]);
    }

    /**
     * @Route("/{id}", name="trick_delete", methods={"POST"})
     */
    public function delete(Request $request, Trick $trick): Response
    {
        if ($this->isCsrfTokenValid('delete'.$trick->getId(), $request->request->get('_token'))) {
            $entityManager = $this->getDoctrine()->getManager();
            $entityManager->remove($trick);
            $entityManager->flush();
        }

        return $this->redirectToRoute('trick_index', [], Response::HTTP_SEE_OTHER);
    }
    
    private function createImageEntity($fileImage)
    {
        //ex name: rabbit.jpg
        $name_with_extension = $fileImage->getClientOriginalName();
        //name become: rabbit
        $name_without_extension = pathinfo($name_with_extension, PATHINFO_FILENAME);
        //generate unique name
        $fileName = $name_without_extension . "-" .md5(uniqid()) . '.' .$fileImage->guessExtension();
        
        $image = new Image();
        $image->setName($fileName);
        return $image;
    }
    
    private function saveImageInServer($fileImage, Image $image)
    {
        $fileImage->move(
            $this->getParameter('image_trick'), $image->getName());
    }

}
